*Sunayana Malla****
**Identification of Minimal Modifications for Phenotype Switching****
$INLINECOM /*  */
$offListing

******************** List of Variables **************************
*       v(j) = flux value for the reaction j                    
*       z = objective value                                     
*       yu(j) = binary variable that pinpoint upregulations     
*       yl(j) = binary variable that pinpoint downregulations   
*       y0(j) = binary variable that pinpoint deletion         

******************** List of Parameters *************************
*       s(i,j) = stoichiometric index of metabolite i in rxn j  
*       LB(j)/UB(j) = Lower / Upper Bounds for fluxes           
*       basemin(j) = min flux value of reaction j in the phenotype to be switched
*       basemax(j) = max flux value of reaction j in the phenotype to be switched       
*****************************************************************

options
        limrow = 10000
        limcol = 10000
        optCR = 1E-9
        optCA = 0.0
        iterlim = 100000
        decimals = 10
        reslim = 100000
        work = 50000000
        sysout = off
        solprint = on;

******************************** SET DEFINITIONS ***************************************
*
*       i               = set of all metabolites
*       j               = set of all reactions
*       constraint(j) = set of reactions in the constraints of inner problem
*      mustu(j), mustl(j),mustdel(j) = set of reactions in the to be upregulated/downregulated or deleted categories
*****************************************************************************************

sets

i metabolites
$include "metabolites.txt"

j reactions
$include "Reactions.txt"

$ONEMPTY


excluded_U(j)
$include "Excluded_U.txt"

excluded_L(j)
$include "Excluded_L.txt"

excluded_K(j)
$include "Excluded_K.txt"

index /1*500/

$ONEMPTY


mustl(j)
$include "L.txt"

mustu(j)
$include "up.txt"

mustdel(j)
$include "d.txt"

;

****************************** PARAMETRIC CONSTANTS USED ********************************
*
*       s(i,j)          = Stoichiometry of metabolite i in reaction j
*       rxntype(j)      = Specified whether a reaction is irreversible (0), reversible
*                         (1 - forward, 2 - backward reaction), pseudo reactions (3), or
*                         exchange reactions (4)
*       basemin(j)      = Stores  the minimum flux of reaction j in the phenotype to be changed
*       basemax(j)      = Stores  the maximum flux of reaction j in the phenotype to be changed
*       phenomin(j)     = Stored  the minimum flux of reaction j in the target phenotype
*       phenomax(j)     = Stores  the maximum flux of reaction j in the target phenotype
*       LB(j)/UB(j)     = Stores the lower and upper bounds for each reaction j
*       n               = counter
*       epsilon         = error value
*       LB(j)/UB(j)     = Global lower and upper bounds for reaction j
*       k               = Number of Interventions allowed in the shifting of the phenotypes
*       bigM            = Large real number used for linearizing constraints
*
*****************************************************************************************

parameter

s(i,j)
$include"sij.txt"

basemin(j)
$include"M1min.txt"

basemax(j)
$include"M1max.txt"

LB(j)
$include"lower_bound.txt"

UB(j)
$include"upper_bound.txt"

phenomin(j)
$include"M2min.txt"

phenomax(j)
$include"M2max.txt"

M1(j)
$include "M1flux.txt"

M2(j)
$include "M2flux.txt"

matrix1(index, j)
matrix2(index, j)
matrix3(index, j)

matrix1_flux(index, j)
matrix2_flux(index, j)
matrix3_flux(index, j)

objective(index)

epsilon
k
nMax
bigM
LB(j)
UB(j)
minmod
;
matrix1(index, j) = 0;
matrix2(index, j) = 0;
matrix3(index, j) = 0;

matrix1_flux(index, j) = 0;
matrix2_flux(index, j) = 0;
matrix3_flux(index, j) = 0;

objective(index) = 0;
optforce = 1;

***************************** VARIABLE DEFINITIONS **************************************
*
*       v(j)            = Flux of a reaction j 
*       zdual           = Objective value for the dual problem 
*       zprimal         = Objective value for the primal problem 
*       lambda, mu      = Dual variables 
*       w               = Linearizing variable (Outer Problem) 
*       z               = Objective value of the outer problem 
*       deltam/deltap
*       thetam/thetap   = Dual variables for binding constraints 
*       wdeltap/wdeltam
*       wtheta / wphi   = Linearing variables (Outer Problem) 
*
*       yu(j), yl(j),y0(j)    = Binary variables pertaining to up-regulations and down-regulations
*                              If yu(j) = 1, then reaction must be actively upregulated
*                                       = 0, Otherwise
*       theta, phi      = Dual variables (Inner Problem)
*
*****************************************************************************************

variables

v(j)
mu(j)
lambda(i)
z
wtheta(j), wphi(j), wdeltap(j), wdeltam(j)
dummy(j)
;

positive variables
theta(j), phi(j), deltam(j), deltap(j)
;

binary variables
yu(j), yl(j), y0(j)
;

**************** INITIALIZING PARAMETRIC VARIABLES AND SETS ****************************

bigM = 1000;
epsilon = 0.000001;
nMax = 8310;
k= 3; %number of interventions
scalar counter /0/;

******************* DEFINITION OF EQUATIONS *********************************************
*** OUTER PROBLEM                                                                       *
***     outer = Outer objective - Minimize sum(up+low+knockout)                         *
***     outer1 = Sum of all interventions should not exceed k                           *
***     outer2 = Each reaction can be considered for only one of Up Regulation          *
***              Down regulation or Knockout                                            *
***    outer4,outer3 = Equating the Inner Primal and Dual objective functions           *
***                                                                           
***     outer19 = Linearinzing constraints (using bigM method)              
***     abs1/abs2= Linearizing the inner problem                                        *
*************************************************************************************************
*********** INNER PROBLEM (PRIMAL)                                                              *
***********     primal = Primal objective function (Minimize differnce of fluxesin base and target)                        *
***********     primal1 = Stoichiometric Constraint                                             *
***********     primal2 = Constraint that imparts the up-regulations                            *
***********     primal3 = Constraint that imparts the down-regulations                          *
***********     primal4 = Global upper bound for the fluxes                                     *
***********     primal5 = Global lower bound for the fluxes                                     *
***********     primal6 = Contrained reactions                                                  *
*************************************************************************************************
*********** INNER PROBLEM (DUAL)                                                                *
***********     dual = Dual objective function                                                  *

*************************************************************************************************

equations

primaldual
primal1
primal2
primal3
primal4
primal5
abs1
abs2
dual1
outer
outer1
outer2
outer4
outer5
outer6
outer7
outer8
outer9
outer10
outer11
outer12
outer13
outer14
outer15
outer16
outer17
outer18
outer19
outer20
outer21
outer22
outer23
;

************************ OUTER PROBLEM **********************************************

outer..                                 z =e= sum(j,yu(j)+yl(j)+y0(j));
outer1..                                sum(j, yu(j) + yl(j) + y0(j) ) =e= k;
outer2(j)..                             yu(j) + yl(j) + y0(j) =l= 1;
outer3(j)..                             wtheta(j) =l= bigM*yu(j);
outer4(j)..                             wtheta(j) =g= -bigM*yu(j);
outer5(j)..                             wtheta(j) =l= theta(j) + bigM*(1-yu(j) );
outer6(j)..                             wtheta(j) =g= theta(j) - bigM*(1-yu(j) );
outer7(j)..                             wphi(j) =l= bigM*yl(j);
outer8(j)..                             wphi(j) =g= -bigM*yl(j);
outer10(j)..                            wphi(j) =l= phi(j) + bigM*(1-yl(j) );
outer11(j)..                            wphi(j) =g= phi(j) - bigM*(1-yl(j) );
outer12(j)..                            wdeltap(j) =l= bigM*y0(j);
outer13(j)..                            wdeltap(j) =g= -bigM*y0(j);
outer14(j)..                            wdeltap(j) =l= deltap(j) + bigM*(1-y0(j) );
outer15(j)..                            wdeltap(j) =g= deltap(j) - bigM*(1-y0(j) );
outer16(j)..                            wdeltam(j) =l= bigM*y0(j);
outer17(j)..                            wdeltam(j) =g= -bigM*y0(j);
outer18(j)..                            wdeltam(j) =l= deltam(j) + bigM*(1-y0(j) );
outer19(j)..                            wdeltam(j) =g= deltam(j) - bigM*(1-y0(j) );
outer20(index)..                        sum(j, matrix1(index, j)*yu(j)) + sum(j, matrix2(index, j)*yl(j)) + sum(j, matrix3(index, j)*y0(j)) =l= k - 1;
outer21(j)$(excluded_U(j))..            yu(j) =e= 0;
outer22(j)$(excluded_L(j))..            yl(j) =e= 0;
outer23(j)$(excluded_K(j))..            y0(j) =e= 0;

********************* PRIMAL PROBLEM (INNER) ****************************************
        primaldual..                              sum(j, deltap(j)*UB(j) - deltap(j)*y0(j)*UB(j)) - sum(j, deltam(j)*LB(j) - deltam(j)*y0(j)*LB(j)) =e=  sum(j, dummy(j));
        primal1(i)..                                     sum(j, (S(i,j)*v(j))) =e= 0;
        primal2(j)..                                     v(j) =g= phenomin(j)*yu(j) + LB(j)*(1-yu(j) );
        primal3(j)..                                     v(j) =l= phenomax(j)*yl(j) + UB(j)*(1-yl(j) );
        primal4(j)..                                     v(j) =g= LB(j)*(1-y0(j) );
        primal5(j)..                                     v(j) =l= UB(j)*(1-y0(j) );
        abs1(j)..                                       -(M1(j) - M2(j)) =l= dummy(j); 
        abs2(j)..                                        M1(j) - M2(j) =l= dummy(j);

********************* DUAL PROBLEM (INNER) ******************************************
        
        dual1(j)..		sum(i,lambda(i)*S(i,j)) + deltap(j) - deltam(j)  =e= 0;

************ GLOBAL UPPER AND LOWER BOUNDS ******************************************


v.lo(j) = LB(j);
v.up(j) = UB(j);

%fixing the lower bound for biomass
v.lo('biomass_mac') =0.03;


********************************
yu.fx(j)$(not mustu(j) ) = 0;
yl.fx(j)$(not mustl(j) ) = 0;


*************************************************************************************

model bilevel
/
primal1
primal2
primal3
primal4
primal5
dual1
outer
outer1
outer4
outer5
outer6
outer7
outer8
outer9
outer10
outer11
outer12
outer13
outer14
outer15
outer16
outer17
outer18
outer19
outer20
outer21
outer22
outer23
/
;


options iterlim = 1000000;
bilevel.minmod = 1;
z.l = 0;

file sets /MinimalModifications.txt/;
put sets;
put '****************************************'//;


counter = 0;
while((counter lt nMax),

    solve bilevel using mip minimizing z;
         if(bilevel.modelstat eq 1,
                 counter = counter + 1;
                 matrix1(index, j)$(ord(index) = counter and yu.l(j) gt 0.99) = 1;
                 matrix2(index, j)$(ord(index) = counter and yl.l(j) gt 0.99) = 1;
                 matrix3(index, j)$(ord(index) = counter and y0.l(j) gt 0.99) = 1;

                 matrix1_flux(index, j)$(ord(index) = counter and yu.l(j) gt 0.99) = v.l(j);
                 matrix2_flux(index, j)$(ord(index) = counter and yl.l(j) gt 0.99) = v.l(j);
                 matrix3_flux(index, j)$(ord(index) = counter and y0.l(j) gt 0.99) = v.l(j);

                 objective(index)$(ord(index) = counter) = z.l;

         );
        if (bilevel.modelstat ne 1,
                counter = nMax;
        );
);

put /'************Reactions to be upregulated****************************'/;
Loop(mustu(j),
   put j.tl:0:100, "   ", yu.l(j):20:5/;
);

put /'***********Reactions to be downregulated*****************************'/;
Loop(mustl(j),
   put j.tl:0:100, "   ", yl.l(j):20:5/;
);

put /'*************Reactions to be deleted***************************'/;
Loop(mustdel(j),
   put j.tl:0:100, "   ", y0.l(j):20:5/;

);


putclose sets;
		
